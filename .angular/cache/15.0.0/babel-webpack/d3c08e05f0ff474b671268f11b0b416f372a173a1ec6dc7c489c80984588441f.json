{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SearchPipe {\n  transform(items, value) {\n    if (items) {\n      return items.filter(item => {\n        return item.business_name.toLowerCase().includes(value.toLowerCase());\n      });\n    }\n  }\n}\nSearchPipe.ɵfac = function SearchPipe_Factory(t) {\n  return new (t || SearchPipe)();\n};\nSearchPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"search\",\n  type: SearchPipe,\n  pure: true\n});\nexport class Search2Pipe {\n  transform(items, value) {\n    if (items) {\n      if (value != '') {\n        let arr = value.split(',');\n        return items.filter(item => {\n          return arr.includes(item.type);\n        });\n      } else {\n        return items;\n      }\n    }\n  }\n}\nSearch2Pipe.ɵfac = function Search2Pipe_Factory(t) {\n  return new (t || Search2Pipe)();\n};\nSearch2Pipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"search2\",\n  type: Search2Pipe,\n  pure: true\n});\nexport class Search3Pipe {\n  transform(items, value) {\n    if (items) {\n      return items.filter(item => {\n        return item.suffix.toLowerCase().includes(value.toLowerCase());\n      });\n    }\n  }\n}\nSearch3Pipe.ɵfac = function Search3Pipe_Factory(t) {\n  return new (t || Search3Pipe)();\n};\nSearch3Pipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"search3\",\n  type: Search3Pipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,UAAU;EACnBC,SAAS,CAACC,KAAU,EAAEC,KAAa;IAC/B,IAAID,KAAK,EAAE;MACP,OAAOA,KAAK,CAACE,MAAM,CAAEC,IAAS,IAAI;QAC9B,OAAOA,IAAI,CAACC,aAAa,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,EAAE,CAAC;MACzE,CAAC,CAAC;;EAEV;;;mBAPSP,UAAU;AAAA;;;QAAVA,UAAU;EAAAS;AAAA;AAavB,OAAM,MAAOC,WAAW;EACpBT,SAAS,CAACC,KAAU,EAAEC,KAAU;IAC5B,IAAID,KAAK,EAAE;MACP,IAAIC,KAAK,IAAI,EAAE,EAAE;QACb,IAAIQ,GAAG,GAAGR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC;QAC1B,OAAOV,KAAK,CAACE,MAAM,CAAEC,IAAS,IAAI;UAC1B,OAAOM,GAAG,CAACH,QAAQ,CAACH,IAAI,CAACQ,IAAI,CAAC;QACtC,CAAC,CAAC;OACL,MAAM;QACH,OAAOX,KAAK;;;EAGxB;;;mBAZSQ,WAAW;AAAA;;;QAAXA,WAAW;EAAAD;AAAA;AAkBxB,OAAM,MAAOK,WAAW;EACpBb,SAAS,CAACC,KAAU,EAAEC,KAAa;IAC/B,IAAID,KAAK,EAAE;MACP,OAAOA,KAAK,CAACE,MAAM,CAAEC,IAAS,IAAI;QAC9B,OAAOA,IAAI,CAACU,MAAM,CAACR,WAAW,EAAE,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,EAAE,CAAC;MAClE,CAAC,CAAC;;EAEV;;;mBAPSO,WAAW;AAAA;;;QAAXA,WAAW;EAAAL;AAAA","names":["SearchPipe","transform","items","value","filter","item","business_name","toLowerCase","includes","pure","Search2Pipe","arr","split","type","Search3Pipe","suffix"],"sourceRoot":"","sources":["D:\\projects\\angular-embedika-master\\src\\app\\search.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe ({\n    name: 'search'\n})\nexport class SearchPipe implements PipeTransform {\n    transform(items: any, value: string) {\n        if (items) {\n            return items.filter((item: any) => {\n                return item.business_name.toLowerCase().includes(value.toLowerCase());\n            });\n        }\n    }\n}\n\n@Pipe ({\n    name: 'search2'\n})\nexport class Search2Pipe implements PipeTransform {\n    transform(items: any, value: any) {\n        if (items) {\n            if (value != '') {\n                let arr = value.split(','); \n                return items.filter((item: any) => {\n                        return arr.includes(item.type);\n                });\n            } else {\n                return items;\n            }\n        }\n    }\n}\n\n@Pipe ({\n    name: 'search3'\n})\nexport class Search3Pipe implements PipeTransform {\n    transform(items: any, value: string) {\n        if (items) {\n            return items.filter((item: any) => {\n                return item.suffix.toLowerCase().includes(value.toLowerCase());\n            });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}